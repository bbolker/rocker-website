<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uses on Rocker Project</title>
    <link>/use/</link>
    <description>Recent content in uses on Rocker Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/use/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Extending images</title>
      <link>/use/extending/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/extending/</guid>
      <description>Rocker images provide a few utility functions to streamline this process, including the littler scripts which provide a concise syntax for installing packages in Dockerfiles, e.g.
RUN install2.r pkg1 pgk2 pkg3 ...By setting the --error option, you can make the docker build command also fail if the package installation fails. And, you can also set the --skipinstalled option to skip installing installed packages and the --ncpu -1 option to maximize parallelism of the installation.</description>
    </item>
    
    <item>
      <title>Managing containers</title>
      <link>/use/managing_containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/managing_containers/</guid>
      <description>The simplest tools to monitor containers are docker log and docker stats commands.
Cleaning up stale instances Most of the examples shown here include the use of the --rm flag, which will cause this container to be removed after it has exited. By default, a container that is stopped (i.e. exited from) is not removed, and can be resumed later using docker start, be saved as a new docker image, or have files copied from it to the host (see the offical Docker documentation).</description>
    </item>
    
    <item>
      <title>Managing Users</title>
      <link>/use/managing_users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/managing_users/</guid>
      <description>RStudio-based instances now always require a custom password as an environmental variable -e:
docker run -d -p 8787:8787 -e PASSWORD=clever-custom-password rocker/rstudio If a password is not provided, a randomly generated password will be given in the docker log for the container. Check the terminal output or use docker logs command to check.
RStudio without authentication If you are certain you are running in a secure environment (e.g. not a publicly accessible server such as AWS instance), you can disable authentication for RStudio by setting an environmental variable DISABLE_AUTH=true, e.</description>
    </item>
    
    <item>
      <title>Networking: tips and tricks</title>
      <link>/use/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/networking/</guid>
      <description>https HTTPS Any RStudio instance on a remote server is accessed over an unencrypted http by default (though RStudio encrypts the password entered to log in through client-side javascript.) The easiest way to connect over a secure https connection is to use a reverse proxy server, such as Caddy. To establish an encrypted https connection, you must first have control of a registered domain name: https cannot be used when connecting directly to a given ip address.</description>
    </item>
    
    <item>
      <title>Other topics</title>
      <link>/use/other_topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/other_topics/</guid>
      <description>selecting the BLAS implementation used by R By default rocker/r-ver uses the OpenBLAS (http://www.openblas.net) implementation for Linear Algebra (cf https://cran.r-project.org/doc/manuals/r-release/R-admin.html#BLAS). But it is possible to switch for the reference BLAS implementation (http://www.netlib.org/blas/) (as provided by the Debian package libblas-dev) using the Shared BLAS setup (cf https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Shared-BLAS).
checking which BLAS is in use You can see the current BLAS configuration in your image by using sessionInfo() from the R console; e.g.</description>
    </item>
    
    <item>
      <title>Reproducibility</title>
      <link>/use/reproducibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/reproducibility/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Shared Volumes</title>
      <link>/use/shared_volumes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/shared_volumes/</guid>
      <description>A common configuration with Rocker containers is to share volumes between the container and the host filesystem. This allows the container to access and modify local files in directories you specify. In this way, the container can be treated as ephemeral while files you create will persist after the container is destroyed. Because the container only has access to files within the directories you specify, this can also prevent a user from accidentally modifying unrelated files on the file system when using software inside the container.</description>
    </item>
    
    <item>
      <title>Singularity</title>
      <link>/use/singularity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/use/singularity/</guid>
      <description>Singularity is useful for running containers as an unprivileged user, especially in multi-user environments like High-Performance Computing clusters. Rocker images can be imported and run using Singularity, with optional custom password support.
Importing a Rocker Image Use the singularity pull command to import the desired Rocker image from Docker Hub into a (compressed, read-only) Singularity Image File:
singularity pull docker://rocker/rstudio:4.0.4 If additional Debian (or other) software packages are needed, a Rocker base image can be extended in a Singularity definition file.</description>
    </item>
    
  </channel>
</rss>
